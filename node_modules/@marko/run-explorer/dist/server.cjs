"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// scripts/importMetaURL.js
var import_url = require("url");
var __importMetaURL = (0, import_url.pathToFileURL)(__filename);

// server.ts
var import_serve_static = __toESM(require("serve-static"), 1);
var import_compression = __toESM(require("compression"), 1);
var import_http = require("http");
var import_path = require("path");
var import_url2 = require("url");
var import_zlib = __toESM(require("zlib"), 1);
var import_child_process = require("child_process");
var import_path2 = __toESM(require("path"), 1);
var { PORT = 3e3 } = process.env;
var __dirname = (0, import_path.dirname)((0, import_url2.fileURLToPath)(__importMetaURL));
var packageDir = import_path2.default.join(__dirname, "..");
var appDir = import_path2.default.join(packageDir, ".app");
var entryFile = import_path2.default.join(packageDir, "src", "index.ts");
var buildPromise = null;
async function build() {
  return buildPromise ?? (buildPromise = new Promise((resolve, reject) => {
    (0, import_child_process.exec)(
      `marko-run build --output ${appDir} ${entryFile}`,
      { cwd: packageDir, env: { ...process.env, MR_EXPLORER: "false" } },
      async (error) => {
        if (error) {
          reject(error);
        }
        ({ default: middleware } = await import(import_path2.default.join(appDir, "index.mjs")));
        resolve();
      }
    );
  }));
}
var middleware = (req, res) => {
  build().then(() => middleware(req, res));
};
var compress = (0, import_compression.default)({
  flush: import_zlib.default.constants.Z_PARTIAL_FLUSH,
  threshold: 500
});
var staticServe = (0, import_serve_static.default)(appDir, {
  index: false,
  immutable: true,
  maxAge: "365 days"
});
(0, import_http.createServer)(
  (req, res) => compress(
    req,
    res,
    () => staticServe(req, res, () => middleware(req, res))
  )
).listen(PORT);
