// server.ts
import createStaticServe from "serve-static";
import compression from "compression";
import { createServer } from "http";
import { dirname } from "path";
import { fileURLToPath } from "url";
import zlib from "zlib";
import { exec } from "child_process";
import path from "path";
var { PORT = 3e3 } = process.env;
var __dirname = dirname(fileURLToPath(import.meta.url));
var packageDir = path.join(__dirname, "..");
var appDir = path.join(packageDir, ".app");
var entryFile = path.join(packageDir, "src", "index.ts");
var buildPromise = null;
async function build() {
  return buildPromise ?? (buildPromise = new Promise((resolve, reject) => {
    exec(
      `marko-run build --output ${appDir} ${entryFile}`,
      { cwd: packageDir, env: { ...process.env, MR_EXPLORER: "false" } },
      async (error) => {
        if (error) {
          reject(error);
        }
        ({ default: middleware } = await import(path.join(appDir, "index.mjs")));
        resolve();
      }
    );
  }));
}
var middleware = (req, res) => {
  build().then(() => middleware(req, res));
};
var compress = compression({
  flush: zlib.constants.Z_PARTIAL_FLUSH,
  threshold: 500
});
var staticServe = createStaticServe(appDir, {
  index: false,
  immutable: true,
  maxAge: "365 days"
});
createServer(
  (req, res) => compress(
    req,
    res,
    () => staticServe(req, res, () => middleware(req, res))
  )
).listen(PORT);
