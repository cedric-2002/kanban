"use strict";exports.__esModule = true;exports.computeNode = exports.assertNoVar = exports.assertNoParams = exports.assertNoAttributes = exports.assertNoAttributeTags = exports.assertNoArgs = exports.assertAttributesOrSingleArg = exports.assertAttributesOrArgs = exports.assertAllowedAttributes = exports.DiagnosticType = void 0;exports.defineTag = defineTag;exports.withLoc = exports.resolveTagImport = exports.resolveRelativePath = exports.registerMacro = exports.parseVar = exports.parseTypeParams = exports.parseTypeArgs = exports.parseTemplateLiteral = exports.parseStatements = exports.parseParams = exports.parseExpression = exports.parseArgs = exports.normalizeTemplateString = exports.loadFileForTag = exports.loadFileForImport = exports.isTransparentTag = exports.isNativeTag = exports.isMacroTag = exports.isLoopTag = exports.isDynamicTag = exports.isAttributeTag = exports.importNamed = exports.importDefault = exports.hasMacro = exports.getTemplateId = exports.getTaglibLookup = exports.getTagTemplate = exports.getTagDefForTagName = exports.getTagDef = exports.getMacroIdentifierForName = exports.getMacroIdentifier = exports.getLocRange = exports.getLoc = exports.getFullyResolvedTagName = exports.getArgOrSequence = exports.findParentTag = exports.findAttributeTags = exports.diagnosticWarn = exports.diagnosticSuggest = exports.diagnosticError = exports.diagnosticDeprecate = void 0;var _tags = require("./tags");exports.isNativeTag = _tags.isNativeTag;exports.isMacroTag = _tags.isMacroTag;exports.isDynamicTag = _tags.isDynamicTag;exports.isAttributeTag = _tags.isAttributeTag;exports.isTransparentTag = _tags.isTransparentTag;exports.isLoopTag = _tags.isLoopTag;exports.registerMacro = _tags.registerMacro;exports.hasMacro = _tags.hasMacro;exports.getMacroIdentifierForName = _tags.getMacroIdentifierForName;exports.getMacroIdentifier = _tags.getMacroIdentifier;exports.getTagTemplate = _tags.getTagTemplate;exports.getTagDef = _tags.getTagDef;exports.getFullyResolvedTagName = _tags.getFullyResolvedTagName;exports.findParentTag = _tags.findParentTag;exports.findAttributeTags = _tags.findAttributeTags;exports.getArgOrSequence = _tags.getArgOrSequence;exports.loadFileForTag = _tags.loadFileForTag;exports.loadFileForImport = _tags.loadFileForImport;exports.getTemplateId = _tags.getTemplateId;exports.resolveTagImport = _tags.resolveTagImport;





















var _assert = require("./assert");exports.assertAllowedAttributes = _assert.assertAllowedAttributes;exports.assertNoArgs = _assert.assertNoArgs;exports.assertNoAttributes = _assert.assertNoAttributes;exports.assertNoParams = _assert.assertNoParams;exports.assertNoVar = _assert.assertNoVar;exports.assertNoAttributeTags = _assert.assertNoAttributeTags;exports.assertAttributesOrArgs = _assert.assertAttributesOrArgs;exports.assertAttributesOrSingleArg = _assert.assertAttributesOrSingleArg;









var _compute = require("./compute");exports.computeNode = _compute.computeNode;
var _templateString = require("./template-string");exports.normalizeTemplateString = _templateString.normalizeTemplateString;

var _loc = require("./loc");exports.getLoc = _loc.getLoc;exports.getLocRange = _loc.getLocRange;exports.withLoc = _loc.withLoc;

var _parse = require("./parse");exports.parseStatements = _parse.parseStatements;exports.parseExpression = _parse.parseExpression;exports.parseParams = _parse.parseParams;exports.parseArgs = _parse.parseArgs;exports.parseVar = _parse.parseVar;exports.parseTemplateLiteral = _parse.parseTemplateLiteral;exports.parseTypeArgs = _parse.parseTypeArgs;exports.parseTypeParams = _parse.parseTypeParams;










var _imports = require("./imports");exports.resolveRelativePath = _imports.resolveRelativePath;exports.importDefault = _imports.importDefault;exports.importNamed = _imports.importNamed;

var _taglib = require("./taglib");exports.getTaglibLookup = _taglib.getTaglibLookup;exports.getTagDefForTagName = _taglib.getTagDefForTagName;

var _diagnostics = require("./diagnostics");exports.DiagnosticType = _diagnostics.DiagnosticType;exports.diagnosticError = _diagnostics.diagnosticError;exports.diagnosticDeprecate = _diagnostics.diagnosticDeprecate;exports.diagnosticWarn = _diagnostics.diagnosticWarn;exports.diagnosticSuggest = _diagnostics.diagnosticSuggest;







function defineTag(tag) {
  return tag;
} // just used for adding types for compiler plugins.