import type { AnyRoute, Awaitable, Context, InputObject, MultiRouteContext, NextFunction, Platform, RouteHandler } from "./types";
export declare function pageResponse(template: any, input: Record<PropertyKey, unknown>): Response;
export declare const NotHandled: typeof MarkoRun.NotHandled;
export declare const NotMatched: typeof MarkoRun.NotMatched;
export declare function createContext<TRoute extends AnyRoute>(route: TRoute | undefined, request: Request, platform: Platform, url?: URL): [Context<TRoute>, (data?: InputObject) => InputObject];
export declare function call<TRoute extends AnyRoute>(handler: RouteHandler<TRoute>, next: NextFunction, context: MultiRouteContext<TRoute>): Promise<Response>;
export declare function compose(handlers: RouteHandler[]): RouteHandler;
export declare function normalize(obj: RouteHandler | RouteHandler[] | Promise<RouteHandler | RouteHandler[]>): RouteHandler;
export declare function stripResponseBodySync(response: Response): Response;
export declare function stripResponseBody(response: Awaitable<Response>): Awaitable<Response>;
export declare function passthrough(): void;
export declare function noContent(): Response;
export declare function notHandled(): void;
export declare function notMatched(): null;
