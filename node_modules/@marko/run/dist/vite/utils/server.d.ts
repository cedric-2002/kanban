import { type ChildProcess, type StdioOptions } from "child_process";
import { type Worker } from "cluster";
import { type Socket } from "net";
export interface SpawnedServer {
    port: number;
    close(): Promise<void> | void;
}
export declare function parseEnv(envFile: string): Promise<import("dotenv").DotenvParseOutput | undefined>;
export declare function loadEnv(envFile: string): void;
export declare function spawnServer(cmd: string, args?: string[], port?: number, env?: string | Record<string, string>, cwd?: string, wait?: number, stdio?: StdioOptions): Promise<SpawnedServer>;
export declare function spawnServerWorker(module: string, args?: string[], port?: number, env?: string | Record<string, string>, wait?: boolean): Promise<Worker>;
export declare function waitForError(proc: ChildProcess, port: number): Promise<void>;
export declare function waitForServer(port: number, wait?: number): Promise<Socket>;
export declare function waitForWorker(worker: Worker, port: number): Promise<void>;
export declare function getConnection(port: number): Promise<Socket | null>;
export declare function isPortInUse(port: number): Promise<boolean>;
export declare function getAvailablePort(port?: number): Promise<number>;
export declare function getInspectOptions(args: string[]): {
    host: string | undefined;
    port: number | undefined;
    wait: boolean | undefined;
} | undefined;
