import type { ServerResponse } from "http";
import { type Connect, type InlineConfig, type ViteDevServer } from "vite";
export interface MarkoRunDev {
    readonly devServers: ReadonlySet<ViteDevServer>;
    addDevServer(devServer: ViteDevServer): void;
    clear(): void;
    onClient(res: ServerResponse, callaback: (ws: WebSocket) => void): void;
}
declare global {
    var __marko_run_dev__: MarkoRunDev | undefined;
}
export declare function createViteDevServer(config?: InlineConfig): Promise<ViteDevServer>;
export declare function createDevServer(config?: InlineConfig): Promise<ViteDevServer>;
export declare function getDevGlobal(): MarkoRunDev;
export declare function createErrorMiddleware(devServer: ViteDevServer): Connect.ErrorHandleFunction;
