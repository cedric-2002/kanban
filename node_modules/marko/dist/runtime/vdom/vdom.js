"use strict";var parseHTML = require("./parse-html");
var VComponent = require("./VComponent");
var VDocumentFragment = require("./VDocumentFragment");
var VElement = require("./VElement");
var VFragment = require("./VFragment");
var VNode = require("./VNode");
var VText = require("./VText");

var specialHtmlRegexp = /[&<]/;

function virtualizeChildNodes(node, vdomParent, ownerComponent) {
  var curChild = node.firstChild;
  while (curChild) {
    vdomParent.bQ_(virtualize(curChild, ownerComponent));
    curChild = curChild.nextSibling;
  }
}

function virtualize(node, ownerComponent) {
  switch (node.nodeType) {
    case 1:
      return VElement.ci_(node, virtualizeChildNodes, ownerComponent);
    case 3:
      return new VText(node.nodeValue, ownerComponent);
    case 11:
      var vdomDocFragment = new VDocumentFragment();
      virtualizeChildNodes(node, vdomDocFragment, ownerComponent);
      return vdomDocFragment;
  }
}

function virtualizeHTML(html, ownerComponent) {
  if (!specialHtmlRegexp.test(html)) {
    return new VText(html, ownerComponent);
  }

  var vdomFragment = new VDocumentFragment();
  var curChild = parseHTML(html);

  while (curChild) {
    vdomFragment.bQ_(virtualize(curChild, ownerComponent));
    curChild = curChild.nextSibling;
  }

  return vdomFragment;
}

var Node_prototype = VNode.prototype;

/**
 * Shorthand method for creating and appending a Text node with a given value
 * @param  {String} value The text value for the new Text node
 */
Node_prototype.t = function (value) {
  var type = typeof value;
  var vdomNode;

  if (type !== "string") {
    if (value == null) {
      value = "";
    } else if (type === "object") {
      if (value.toHTML) {
        vdomNode = virtualizeHTML(value.toHTML());
      }
    }
  }

  this.bQ_(vdomNode || new VText(value.toString()));
  return this.ch_();
};

Node_prototype.bV_ = function () {
  return this.bQ_(new VDocumentFragment());
};

exports.bA_ = VDocumentFragment;
exports.bz_ = VElement;
exports.bB_ = VText;
exports.bC_ = VComponent;
exports.bD_ = VFragment;
exports.ci_ = virtualize;
exports.bE_ = virtualizeHTML;